import re
import requests
import json
import os
from datetime import datetime

class YouTubeSpamDetector:
    def __init__(self, config, test_mode=False):
        """
        config: dict ‡∏à‡∏≤‡∏Å ConfigManager
        test_mode: bool ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        """
        self.test_mode = test_mode
        if not test_mode:
            self.api_key = config["youtube_api_key"]
            if not self.api_key:
                raise ValueError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ YouTube API key")
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ AI provider
        self.ai_config = config["ai_provider"]
        self.llm_url = self.ai_config["url"]
        
        self.spam_db_file = "spam_patterns_db.json"
        self.load_spam_patterns()
        
    def load_spam_patterns(self):
        """‡πÇ‡∏´‡∏•‡∏î patterns ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        try:
            if os.path.exists(self.spam_db_file):
                with open(self.spam_db_file, 'r', encoding='utf-8') as f:
                    self.spam_patterns = json.load(f)
            else:
                self.spam_patterns = []
                self.save_spam_patterns()
        except Exception as e:
            print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {e}")
            self.spam_patterns = []

    def save_spam_patterns(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å patterns ‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        try:
            with open(self.spam_db_file, 'w', encoding='utf-8') as f:
                json.dump(self.spam_patterns, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {e}")

    def add_new_pattern(self, text, pattern_type="gambling"):
        """‡πÄ‡∏û‡∏¥‡πà‡∏° pattern ‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ pattern ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not any(p['pattern'] == text for p in self.spam_patterns):
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            new_pattern = {
                "pattern": text,
                "type": pattern_type,
                "added_date": timestamp
            }
            self.spam_patterns.append(new_pattern)
            self.save_spam_patterns()
            print(f"\nüîÑ ‡πÄ‡∏û‡∏¥‡πà‡∏° pattern ‡πÉ‡∏´‡∏°‡πà: {text}")

    def analyze_with_llm(self, text):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ LLM"""
        try:
            prompt = f"""‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏û‡∏ô‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà:

            ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {text}

            ‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:
            ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: [0-100] (‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏û‡∏ô‡∏±‡∏ô)
            ‡∏ú‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: [‡∏™‡πÅ‡∏õ‡∏°/‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡πÅ‡∏õ‡∏°/‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à]
            ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: [‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå]

            ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô‡∏ô‡∏≠‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
            """

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á payload ‡∏ï‡∏≤‡∏° provider
            if self.ai_config["name"] == "ollama":
                payload = {
                    "model": self.ai_config["model"],
                    "messages": [
                        {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"},
                        {"role": "user", "content": prompt}
                    ]
                }
            elif self.ai_config["name"] == "openai":
                payload = {
                    "model": "gpt-3.5-turbo",
                    "messages": [
                        {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"},
                        {"role": "user", "content": prompt}
                    ],
                    "temperature": 0.7,
                    "max_tokens": 200
                }
            elif self.ai_config["name"] == "deepseek":
                payload = {
                    "model": self.ai_config["model"],
                    "messages": [
                        {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"},
                        {"role": "user", "content": prompt}
                    ],
                    "temperature": 0.7,
                    "max_tokens": 200
                }
            elif self.ai_config["name"] == "grok":
                payload = {
                    "model": self.ai_config["model"],
                    "messages": [
                        {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"},
                        {"role": "user", "content": prompt}
                    ],
                    "temperature": 0.7,
                    "max_tokens": 200,
                    "stream": False
                }
            else:
                # LM Studio ‡πÅ‡∏•‡∏∞ providers ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                payload = {
                    "messages": [
                        {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"},
                        {"role": "user", "content": prompt}
                    ],
                    "temperature": 0.7,
                    "max_tokens": 200
                }

            # ‡πÄ‡∏û‡∏¥‡πà‡∏° headers ‡∏ï‡∏≤‡∏° provider
            headers = {
                "Content-Type": "application/json"
            }
            if "api_key" in self.ai_config:
                if self.ai_config["name"] == "grok":
                    headers["Authorization"] = self.ai_config["api_key"]  # Grok ‡πÉ‡∏ä‡πâ key ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                else:
                    headers["Authorization"] = f"Bearer {self.ai_config['api_key']}"

            # ‡∏™‡πà‡∏á request
            try:
                response = requests.post(self.llm_url, json=payload, headers=headers)
                response.raise_for_status()
                
                # ‡πÅ‡∏¢‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ï‡∏≤‡∏° provider
                if self.ai_config["name"] == "ollama":
                    full_answer = response.json()['message']['content'].strip()
                else:
                    full_answer = response.json()['choices'][0]['message']['content'].strip()

            except requests.exceptions.RequestException as e:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö {self.ai_config['name'].upper()} ‡πÑ‡∏î‡πâ")
                if hasattr(e.response, 'text'):
                    print(f"‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: {e.response.text}")
                if self.ai_config["name"] == "grok":
                    print("‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key ‡πÅ‡∏•‡∏∞ model name ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å Grok")
                return None

            # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å
            full_answer = re.sub(r'<\|im_start\|>|<\|im_end\|>|‰∏ä‰∏ãÊñá|assistant|user', '', full_answer)
            
            # ‡πÅ‡∏¢‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
            lines = [line.strip() for line in full_answer.split('\n') if line.strip()]
            ai_score = 0
            ai_result = "‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à"
            ai_reason = ""
            
            for line in lines:
                if line.startswith("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô:"):
                    try:
                        ai_score = int(re.search(r'\d+', line).group())
                    except:
                        ai_score = 0
                elif line.startswith("‡∏ú‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:"):
                    result_text = line.split(":", 1)[1].strip().lower()
                    if "‡∏™‡πÅ‡∏õ‡∏°" in result_text:
                        ai_result = "‡∏™‡πÅ‡∏õ‡∏°"
                    elif "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà" in result_text:
                        ai_result = "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡πÅ‡∏õ‡∏°"
                    else:
                        ai_result = "‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à"
                elif line.startswith("‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•:"):
                    ai_reason = line.split(":", 1)[1].strip()
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
            print(f"üí° ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å AI: {ai_score}/100")
            print(f"ü§ñ ‡∏ú‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {ai_result}")
            if ai_reason:
                print(f"üí¨ ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: {ai_reason}")
            
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô spam ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            if ai_score >= 80 and len(text) > 10:
                self.add_new_pattern(text)
                return True
            elif ai_score > 50:
                return True
            elif ai_score <= 20:
                return False
            else:
                return None if ai_result == "‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à" else (ai_result == "‡∏™‡πÅ‡∏õ‡∏°")
            
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
            return None

    def is_spam(self, comment):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô spam ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        print(f"\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {comment[:100]}...")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ score = 0
        pattern_score = 0
        matched_patterns = []
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ patterns spam
        for pattern_obj in self.spam_patterns:
            pattern = pattern_obj['pattern']
            pattern_type = pattern_obj['type']
            try:
                if re.search(pattern, comment):
                    if pattern_type == "gambling_site_name":
                        pattern_score += 3
                    elif pattern_type == "gambling_keywords":
                        pattern_score += 2
                    else:
                        pattern_score += 1
                    matched_patterns.append(pattern)
            except Exception as e:
                continue
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö patterns ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        if self._check_basic_spam_patterns(comment):
            pattern_score += 2
            matched_patterns.append("basic_spam_pattern")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
        if matched_patterns:
            print(f"‚ö†Ô∏è ‡∏û‡∏ö patterns ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô {len(matched_patterns)} ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö")
            print(f"üìä Pattern Score: {pattern_score}")
        
        # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≥ (0) ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà spam
        if pattern_score == 0 and len(comment.split()) < 20:
            print("‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢")
            return False
        
        # ‡πÉ‡∏´‡πâ AI ‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏∏‡∏Å‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ pattern score ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 1 ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ
        if pattern_score > 0:
            print("ü§ñ ‡πÉ‡∏ä‡πâ AI ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°...")
            llm_result = self.analyze_with_llm(comment)
            
            if llm_result is True:
                print("üö´ AI ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Spam!")
                return True
            elif llm_result is False:
                print("‚úÖ AI ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Spam")
                return False
            else:
                # ‡∏ñ‡πâ‡∏≤ AI ‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ pattern score ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô
                is_spam = pattern_score >= 2
                print(f"‚ùì AI ‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à {'üö´ ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Spam' if is_spam else '‚úÖ ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Spam'} (‡πÉ‡∏ä‡πâ Pattern Score ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô)")
                return is_spam
        
        return False
    
    def preprocess_text(self, text):
        """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©"""
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏õ‡∏Å‡∏ï‡∏¥
        special_chars_map = {
            # ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà
            'ùêÄ-ùêô': 'A-Z', 'ùï¨-ùñÖ': 'A-Z', 'ùî∏-ùïê': 'A-Z',
            'ùíú-ùíµ': 'A-Z', 'ùìê-ùì©': 'A-Z', 'Ôº°-Ôº∫': 'A-Z',
            
            # ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å
            'ùêö-ùê≥': 'a-z', 'ùïí-ùï´': 'a-z', 'ùñÜ-ùñü': 'a-z',
            'ùí∂-ùìè': 'a-z', 'ùì™-ùîÉ': 'a-z', 'ÔΩÅ-ÔΩö': 'a-z',
            'ùôñ-ùôØ': 'a-z', 'ùöä-ùö£': 'a-z', 
            
            # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏û‡∏¥‡πÄ‡∏®‡∏©
            'ùüé-ùüó': '0-9', 'ùüò-ùü°': '0-9', 'Ôºê-Ôºô': '0-9',
            'ùü¢-ùü´': '0-9', 'ùü¨-ùüµ': '0-9', 'ùü∂-ùüø': '0-9',
            
            # ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©
            'Ôº†': '@', 'Ôºø': '_', 'Ôºé': '.',
            'üëâ': ' ', 'üî•': ' ', 'üéÆ': ' ',
            'üíé': ' ', 'üí∞': ' ', 'üíµ': ' ',
            'üé≤': ' ', 'üéØ': ' ', 'üé∞': ' ',
        }
        
        # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©
        for special, normal in special_chars_map.items():
            text = re.sub(f'[{special}]', lambda m: normal[0], text)
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á
        text = re.sub(r'[ùêÄ-ùêôùï¨-ùñÖùî∏-ùïê]', lambda m: chr(ord('A') + (ord(m.group()) - ord('ùêÄ'))), text)
        text = re.sub(r'[ùêö-ùê≥ùïí-ùï´ùñÜ-ùñü]', lambda m: chr(ord('a') + (ord(m.group()) - ord('ùêö'))), text)
        text = re.sub(r'[ùüé-ùü°]', lambda m: str(ord(m.group()) - ord('ùüé')), text)
        
        # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÅ‡∏ï‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÑ‡∏ß‡πâ
        text = re.sub(r'[^\w\s@._]', '', text)
        text = text.lower().strip()
        return text

    def _check_basic_spam_patterns(self, comment):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á spam"""
        # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô
        cleaned_comment = self.preprocess_text(comment)
        
        patterns = [
            # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ID/‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
            r'(?i)[@Ôº†][a-z0-9._]+',  # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ID
            r'(?i)(?:line|‡πÑ‡∏•‡∏ô‡πå|id|‡πÑ‡∏≠‡∏î‡∏µ|‡πÅ‡∏≠‡∏î)[\s]*?[:\s]*?[@Ôº†]?[a-z0-9._]+',  # Line ID
            
            # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÄ‡∏á‡∏¥‡∏ô
            r'(?i)(?:‡∏ù‡∏≤‡∏Å|‡πÄ‡∏•‡πà‡∏ô).*?[0-9‡πê-‡πô]+.*?(?:‡∏ö‡∏≤‡∏ó|‡∏ø|‡∏ö)',
            r'(?i)[0-9‡πê-‡πô]+.*?(?:‡∏ö‡∏≤‡∏ó|‡∏ø|‡∏ö).*?(?:‡∏ù‡∏≤‡∏Å|‡πÄ‡∏•‡πà‡∏ô)',
            
            # ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏ô (‡∏£‡∏ß‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©)
            r'(?i)(‡∏™‡∏•‡πá‡∏≠‡∏ï|‡∏ö‡∏≤‡∏Ñ‡∏≤‡∏£‡πà‡∏≤|‡∏Ñ‡∏≤‡∏™‡∏¥‡πÇ‡∏ô|‡πÄ‡∏ß‡πá[‡∏ö‡∏û]‡∏û‡∏ô‡∏±‡∏ô|sa\s*gaming)',
            r'(?i)(‡πÄ‡∏ß‡πá[‡∏ö‡∏û]‡∏ï‡∏£‡∏á.*?(?:‡∏ù‡∏≤‡∏Å.*?‡∏ñ‡∏≠‡∏ô|‡∏ñ‡∏≠‡∏ô.*?‡∏ù‡∏≤‡∏Å))',
            r'(?i)(‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï.*?‡∏ü‡∏£‡∏µ.*?(?:‡∏™‡∏•‡πá‡∏≠‡∏ï|‡∏ö‡∏≤‡∏Ñ‡∏≤‡∏£‡πà‡∏≤|‡∏Ñ‡∏≤‡∏™‡∏¥‡πÇ‡∏ô|‡πÄ‡∏ß‡πá[‡∏ö‡∏û]))',
            
            # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏ö‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
            r'(?i)[a-z0-9‡πê-‡πô]*?[^\w\s]*?(?:‡∏™‡∏•‡πá‡∏≠‡∏ï|‡∏ö‡∏≤‡∏Ñ‡∏≤‡∏£‡πà‡∏≤|‡∏Ñ‡∏≤‡∏™‡∏¥‡πÇ‡∏ô)[^\w\s]*?[a-z0-9‡πê-‡πô]*',
            r'(?i)[@Ôº†][a-z0-9._]+[^\w\s]*?(?:‡∏™‡∏•‡πá‡∏≠‡∏ï|‡∏ö‡∏≤‡∏Ñ‡∏≤‡∏£‡πà‡∏≤|‡∏Ñ‡∏≤‡∏™‡∏¥‡πÇ‡∏ô)',
            r'(?i)(?:[0-9‡πê-‡πô]+[^a-z0-9\s]{1,2}){2,}',  # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå
        ]
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏¥‡∏ö‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß
        return any(re.search(pattern, comment) for pattern in patterns) or \
               any(re.search(pattern, cleaned_comment) for pattern in patterns)

    def delete_comment(self, comment_id):
        """‡∏•‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô"""
        if not self.api_key or self.test_mode:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
            return False
        
        try:
            url = "https://www.googleapis.com/youtube/v3/comments"
            params = {
                'id': comment_id,
                'key': self.api_key
            }
            
            response = requests.delete(url, params=params)
            response.raise_for_status()
            
            print(f"‚úÖ ‡∏•‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô {comment_id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return True
        
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ: {str(e)}")
            return False

    def mark_as_spam(self, comment_id):
        """‡∏°‡∏≤‡∏£‡πå‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏õ‡πá‡∏ô spam"""
        if not self.api_key or self.test_mode:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏≤‡∏£‡πå‡∏Ñ spam ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
            return False
        
        try:
            url = "https://www.googleapis.com/youtube/v3/comments/markAsSpam"
            params = {
                'id': comment_id,
                'key': self.api_key
            }
            
            response = requests.post(url, params=params)
            response.raise_for_status()
            
            print(f"‚úÖ ‡∏°‡∏≤‡∏£‡πå‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô {comment_id} ‡πÄ‡∏õ‡πá‡∏ô spam ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return True
        
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏≤‡∏£‡πå‡∏Ñ spam ‡πÑ‡∏î‡πâ: {str(e)}")
            return False 