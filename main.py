from spam_detector import YouTubeSpamDetector
import getpass
import os
from urllib.parse import urlparse, parse_qs
import requests
from bs4 import BeautifulSoup
import json
import re
from config_manager import ConfigManager

def get_api_key():
    """‡∏£‡∏±‡∏ö API key ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"""
    # ‡∏•‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô API key ‡∏à‡∏≤‡∏Å environment variable ‡∏Å‡πà‡∏≠‡∏ô
    api_key = os.getenv('YOUTUBE_API_KEY')
    
    if not api_key:
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô environment variable ‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        print("\n=== YouTube API Key ===")
        print("1. ‡πÉ‡∏ä‡πâ API Key ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
        print("2. ‡πÉ‡∏™‡πà API Key ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á")
        
        choice = input("\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1-2): ")
        
        if choice == '1':
            api_key = "AIzaSyAKcxbEE8Ta_y3tthEwtYrhLxQNRyBQxx0"
            print("‡πÉ‡∏ä‡πâ API Key ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
        else:
            api_key = getpass.getpass("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà API Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: ")
    
    return api_key

def extract_video_id(url):
    """‡πÅ‡∏õ‡∏•‡∏á YouTube URL ‡πÄ‡∏õ‡πá‡∏ô video ID"""
    parsed_url = urlparse(url)
    
    if parsed_url.hostname in ('youtu.be', 'www.youtu.be'):
        return parsed_url.path[1:]
    if parsed_url.hostname in ('youtube.com', 'www.youtube.com'):
        if parsed_url.path == '/watch':
            return parse_qs(parsed_url.query)['v'][0]
    
    raise ValueError("URL ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà URL ‡∏Ç‡∏≠‡∏á YouTube video")

def get_video_comments(api_key, video_id):
    """‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å YouTube video"""
    base_url = "https://www.googleapis.com/youtube/v3/commentThreads"
    comments = []
    
    params = {
        'part': 'snippet',
        'videoId': video_id,
        'key': api_key,
        'maxResults': 100,
        'textFormat': 'plainText'
    }
    
    try:
        print("\n‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô...")
        response = requests.get(base_url, params=params)
        response.raise_for_status()
        
        data = response.json()
        items = data.get('items', [])
        
        for item in items:
            comment = item['snippet']['topLevelComment']['snippet']
            comment_data = {
                'id': item['snippet']['topLevelComment']['id'],
                'text': comment['textDisplay'],
                'author': comment['authorDisplayName'],
                'published_at': comment['publishedAt']
            }
            comments.append(comment_data)
        
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°
        while 'nextPageToken' in data and len(comments) < 500:
            params['pageToken'] = data['nextPageToken']
            response = requests.get(base_url, params=params)
            response.raise_for_status()
            
            data = response.json()
            items = data.get('items', [])
            
            for item in items:
                comment = item['snippet']['topLevelComment']['snippet']
                comment_data = {
                    'id': item['snippet']['topLevelComment']['id'],
                    'text': comment['textDisplay'],
                    'author': comment['authorDisplayName'],
                    'published_at': comment['publishedAt']
                }
                comments.append(comment_data)
        
        print(f"‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(comments)} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")
        return comments
        
    except requests.RequestException as e:
        if "quotaExceeded" in str(e):
            print("\n‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô API ‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ")
        raise Exception(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ: {str(e)}")

def test_single_comment(detector):
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß"""
    comment = input("\n‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: ")
    is_spam = detector.is_spam(comment)
    print(f"‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: {'üö´ Spam' if is_spam else '‚úÖ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Spam'}\n")

def analyze_video(detector, url):
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠"""
    try:
        video_id = extract_video_id(url)
        comments = get_video_comments(detector.api_key, video_id)
        
        if comments:
            spam_comments = []
            total_comments = len(comments)
            spam_count = 0
            
            for comment in comments:
                if detector.is_spam(comment['text']):
                    spam_count += 1
                    spam_comments.append(comment)
            
            spam_percentage = (spam_count / total_comments * 100) if total_comments > 0 else 0
            
            print(f"\nüìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:")
            print(f"üí¨ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_comments}")
            print(f"üö´ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Spam: {spam_count}")
            print(f"üìà ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå Spam: {spam_percentage:.1f}%")
            
            if spam_comments:
                print("\nüö´ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Spam ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:")
                for i, comment in enumerate(spam_comments, 1):
                    print(f"\n{i}. ‡πÇ‡∏î‡∏¢: {comment['author']}")
                    print(f"   ‡πÄ‡∏°‡∏∑‡πà‡∏≠: {comment['published_at']}")
                    print(f"   ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {comment['text']}")
                    print(f"   ID: {comment['id']}")
                    
                # ‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ spam ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                action = input("\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô Spam ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (1=‡∏•‡∏ö, 2=‡∏°‡∏≤‡∏£‡πå‡∏Ñ‡πÄ‡∏õ‡πá‡∏ô spam, 0=‡∏Ç‡πâ‡∏≤‡∏°): ")
                if action in ['1', '2']:
                    for comment in spam_comments:
                        if action == '1':
                            detector.delete_comment(comment['id'])
                        else:
                            detector.mark_as_spam(comment['id'])
        else:
            print("\n‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ô‡∏µ‡πâ")
    except Exception as e:
        print(f"\n‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

def test_url_only():
    """‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ URL ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"""
    url = input("\n‡πÉ‡∏™‡πà URL ‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ YouTube: ")
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á detector ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        detector = YouTubeSpamDetector(None, test_mode=True)
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
        print("\n‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô...")
        response = requests.get(url)
        response.raise_for_status()
        
        # ‡∏î‡∏∂‡∏á comments ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
        html = response.text
        soup = BeautifulSoup(html, 'html.parser')
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ script ‡∏ó‡∏µ‡πà‡∏°‡∏µ comments data
        pattern = r'ytInitialData = ({.*?});'
        script = re.search(pattern, html)
        if script:
            data = json.loads(script.group(1))
            comments = []
            
            # ‡∏î‡∏∂‡∏á comments ‡∏à‡∏≤‡∏Å ytInitialData
            try:
                items = data['contents']['twoColumnWatchNextResults']['results']['results']['contents']
                for item in items:
                    if 'commentThreadRenderer' in str(item):
                        comment_thread = item['commentThreadRenderer']
                        comment = comment_thread['comment']['commentRenderer']['contentText']['runs'][0]['text']
                        comments.append(comment)
            except (KeyError, IndexError):
                pass
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå comments ‡∏ó‡∏µ‡πà‡∏û‡∏ö
            if comments:
                total_comments = len(comments)
                spam_comments = []
                
                print(f"\n‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_comments} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°...")
                print("-" * 60)
                
                for i, comment in enumerate(comments, 1):
                    print(f"\n‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏µ‡πà {i}/{total_comments}")
                    if detector.is_spam(comment):
                        spam_comments.append(comment)
                        print("üö´ ‡∏û‡∏ö Spam!")
                    else:
                        print("‚úÖ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Spam")
                
                spam_count = len(spam_comments)
                spam_percentage = (spam_count / total_comments * 100) if total_comments > 0 else 0
                
                print(f"\nüìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:")
                print(f"üí¨ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_comments}")
                print(f"üö´ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Spam: {spam_count}")
                print(f"üìà ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå Spam: {spam_percentage:.1f}%")
                
                if spam_comments:
                    print("\nüö´ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Spam ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:")
                    for i, comment in enumerate(spam_comments, 1):
                        print(f"\n{i}. {comment}")
            else:
                print("\n‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ô‡∏µ‡πâ")
                
        else:
            print("\n‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ")
            
    except Exception as e:
        print(f"\n‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

def main():
    print("\n=== YouTube Comment Spam Analyzer ===")
    
    # ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    config_manager = ConfigManager()
    
    print("1. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö")
    print("2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Spam (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ API key)")
    print("3. ‡∏î‡∏π‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏à‡∏≤‡∏Å URL")
    
    mode = input("\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (1-3): ")
    
    if mode == '1':
        # ‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
        youtube_api = config_manager.setup_youtube_api()
        ai_config = config_manager.setup_ai_provider()
        
        config = {
            "youtube_api_key": youtube_api,
            "ai_provider": ai_config
        }
        
        try:
            detector = YouTubeSpamDetector(config)
            print("\n‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            
            while True:
                print("\n=== ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å ===")
                print("1. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏à‡∏≤‡∏Å URL")
                print("2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")
                print("3. ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
                
                choice = input("\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π (1-3): ")
                
                if choice == '1':
                    url = input("\n‡πÉ‡∏™‡πà URL ‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ YouTube: ")
                    analyze_video(detector, url)
                elif choice == '2':
                    test_single_comment(detector)
                elif choice == '3':
                    print("\n‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£!")
                    break
                else:
                    print("\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π 1-3")
                    
        except Exception as e:
            print(f"\n‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
            print("‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API key ‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
            
    elif mode == '2':
        # ‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        try:
            detector = YouTubeSpamDetector(None, test_mode=True)
            print("\n‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            
            while True:
                print("\n=== ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏î‡∏™‡∏≠‡∏ö ===")
                print("1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")
                print("2. ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
                
                choice = input("\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π (1-2): ")
                
                if choice == '1':
                    test_single_comment(detector)
                elif choice == '2':
                    print("\n‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£!")
                    break
                else:
                    print("\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π 1-2")
                    
        except Exception as e:
            print(f"\n‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
    
    elif mode == '3':
        test_url_only()
    
    else:
        print("\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î 1-3")

if __name__ == "__main__":
    main() 
